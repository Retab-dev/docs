{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/openapi/": {
      "get": {
        "summary": "Get Filtered Openapi",
        "operationId": "get_filtered_openapi_openapi__get",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of tags to filter the OpenAPI output.",
              "title": "Tags"
            },
            "description": "List of tags to filter the OpenAPI output.",
            "example": [
              "groussard"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Filtered Openapi Openapi  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/callback": {
      "get": {
        "summary": "Callback",
        "operationId": "callback_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/check-outgoing-ip": {
      "get": {
        "summary": "Check Outgoing Ip",
        "operationId": "check_outgoing_ip_check_outgoing_ip_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Check Outgoing Ip Check Outgoing Ip Get"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Read Root",
        "operationId": "read_root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Read Root  Get"
                }
              }
            }
          }
        }
      }
    },
    "/documents/process": {
      "post": {
        "tags": [
          "documents"
        ],
        "summary": "Process Documents",
        "operationId": "process_documents_documents_process_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentAPIRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentAPIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/distance": {
      "get": {
        "tags": [
          "documents",
          "road_not_visible"
        ],
        "summary": "Get Distance",
        "operationId": "get_distance_documents_distance_get",
        "parameters": [
          {
            "name": "origin",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Origin"
            }
          },
          {
            "name": "destination",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Destination"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistanceData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/documents/log": {
      "post": {
        "tags": [
          "documents"
        ],
        "summary": "Logformactivity",
        "description": "Logs form activity with the provided data.\n\nArgs:\n    log_data: The form data to log\n    identity: The authenticated user/application identity\n    dashboard_db: Database connection",
        "operationId": "logformactivity_documents_log_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormLogData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Logformactivity Documents Log Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/query_user_auth": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "Query User Auth",
        "operationId": "query_user_auth_iam_query_user_auth_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cube_server__services__iam__models__User"
                }
              }
            }
          }
        }
      }
    },
    "/iam/authenticate/": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "Authenticate",
        "operationId": "authenticate_iam_authenticate__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Identity"
                }
              }
            }
          }
        }
      }
    },
    "/iam/debug": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "Debug Endpoint",
        "operationId": "debug_endpoint_iam_debug_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Debug Endpoint",
        "operationId": "debug_endpoint_iam_debug_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugInfo"
                }
              }
            }
          }
        }
      }
    },
    "/iam/debug-headers": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "Debug Headers",
        "operationId": "debug_headers_iam_debug_headers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeadersDebugInfo"
                }
              }
            }
          }
        }
      }
    },
    "/iam/api/private": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "Private",
        "description": "A valid access token is required to access this route",
        "operationId": "private_iam_api_private_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/iam/workos/login": {
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Login",
        "operationId": "login_iam_workos_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOSLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/list_organization_users": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "List Organization Users",
        "operationId": "list_organization_users_iam_workos_list_organization_users_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/workos__types__user_management__user__User"
                  },
                  "type": "array",
                  "title": "Response List Organization Users Iam Workos List Organization Users Get"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/create_organization": {
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Create Organization",
        "operationId": "create_organization_iam_workos_create_organization_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrganizationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/delete_organization/{organization_id}": {
      "delete": {
        "tags": [
          "iam"
        ],
        "summary": "Delete Organization",
        "operationId": "delete_organization_iam_workos_delete_organization__organization_id__delete",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete Organization Iam Workos Delete Organization  Organization Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/create_user_mongo": {
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Create User Mongo",
        "operationId": "create_user_mongo_iam_workos_create_user_mongo_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMongoUserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/create_user": {
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Create User",
        "operationId": "create_user_iam_workos_create_user_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/check_workos_membership": {
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Check Workos Membership",
        "operationId": "check_workos_membership_iam_workos_check_workos_membership_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailCheckRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "type": "object",
                  "title": "Response Check Workos Membership Iam Workos Check Workos Membership Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/check_workos_organization_existence": {
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Check Workos Organization Existence",
        "operationId": "check_workos_organization_existence_iam_workos_check_workos_organization_existence_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailCheckRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailCheckResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/magic_signup": {
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Magic Signup",
        "operationId": "magic_signup_iam_workos_magic_signup_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MagicSignupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MagicSignupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/update_password": {
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Update Password",
        "operationId": "update_password_iam_workos_update_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "type": "object",
                  "title": "Response Update Password Iam Workos Update Password Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/delete_user/{user_id}": {
      "delete": {
        "tags": [
          "iam"
        ],
        "summary": "Delete User",
        "operationId": "delete_user_iam_workos_delete_user__user_id__delete",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete User Iam Workos Delete User  User Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/workos/delete_user_by_email/{email}": {
      "delete": {
        "tags": [
          "iam"
        ],
        "summary": "Delete User By Email",
        "operationId": "delete_user_by_email_iam_workos_delete_user_by_email__email__delete",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete User By Email Iam Workos Delete User By Email  Email  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/users/update_theme": {
      "put": {
        "tags": [
          "iam"
        ],
        "summary": "Update Theme",
        "operationId": "update_theme_iam_users_update_theme_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateThemeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateThemeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/users/update_language": {
      "put": {
        "tags": [
          "iam"
        ],
        "summary": "Update Language",
        "operationId": "update_language_iam_users_update_language_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLanguageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLanguageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/organizations/schemas/": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "List Schemas",
        "operationId": "list_schemas_iam_organizations_schemas__get",
        "parameters": [
          {
            "name": "form_title",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Form Title"
            }
          },
          {
            "name": "is_current",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Current"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationSchemaEntry"
                  },
                  "title": "Response List Schemas Iam Organizations Schemas  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Create Schema",
        "operationId": "create_schema_iam_organizations_schemas__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchemaEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSchemaEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/organizations/schemas/form_titles": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "Get All Form Titles",
        "operationId": "get_all_form_titles_iam_organizations_schemas_form_titles_get",
        "parameters": [
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          },
          {
            "name": "is_current",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Current"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "title": "Response Get All Form Titles Iam Organizations Schemas Form Titles Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/organizations/schemas/{version}": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "Get Schema",
        "operationId": "get_schema_iam_organizations_schemas__version__get",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSchemaEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Update Schema",
        "operationId": "update_schema_iam_organizations_schemas__version__post",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSchemaEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSchemaEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "iam"
        ],
        "summary": "Delete Schema",
        "operationId": "delete_schema_iam_organizations_schemas__version__delete",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/applications/create_application": {
      "post": {
        "tags": [
          "iam"
        ],
        "summary": "Create Application",
        "operationId": "create_application_iam_applications_create_application_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateApplicationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/iam/applications/list": {
      "get": {
        "tags": [
          "iam"
        ],
        "summary": "List Applications",
        "operationId": "list_applications_iam_applications_list_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListApplicationsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/iam/applications/{client_id}": {
      "delete": {
        "tags": [
          "iam"
        ],
        "summary": "Delete Application",
        "operationId": "delete_application_iam_applications__client_id__delete",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The client ID of the application to delete",
              "title": "Client Id"
            },
            "description": "The client ID of the application to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete Application Iam Applications  Client Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "iam"
        ],
        "summary": "Update Application",
        "operationId": "update_application_iam_applications__client_id__patch",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApplicationResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "token_lifespan": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Lifespan"
          }
        },
        "type": "object",
        "required": [
          "name",
          "client_id",
          "metadata",
          "scope",
          "token_lifespan"
        ],
        "title": "ApplicationResponse"
      },
      "ApplicationUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "token_lifespan": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Lifespan"
          }
        },
        "type": "object",
        "required": [
          "name",
          "scope"
        ],
        "title": "ApplicationUpdate"
      },
      "AttachmentMetadata-Input": {
        "properties": {
          "is_inline": {
            "type": "boolean",
            "title": "Is Inline",
            "description": "Whether the attachment is inline or not.",
            "default": false
          },
          "inline_cid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Inline Cid",
            "description": "CID reference for inline attachments."
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "URL of the attachment."
          },
          "display_metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DisplayMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Display Metadata"
          },
          "ocr": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OCR-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "OCR data for the attachment."
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "description": "Source of the attachment in dot notation attachment_id, or email_id.attachment_id, allow us to keep track of the origin of the attachment, for search purposes. "
          }
        },
        "type": "object",
        "title": "AttachmentMetadata"
      },
      "AttachmentMetadata-Output": {
        "properties": {
          "is_inline": {
            "type": "boolean",
            "title": "Is Inline",
            "description": "Whether the attachment is inline or not.",
            "default": false
          },
          "inline_cid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Inline Cid",
            "description": "CID reference for inline attachments."
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "URL of the attachment."
          },
          "display_metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DisplayMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Display Metadata"
          },
          "ocr": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OCR-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "OCR data for the attachment."
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "description": "Source of the attachment in dot notation attachment_id, or email_id.attachment_id, allow us to keep track of the origin of the attachment, for search purposes. "
          }
        },
        "type": "object",
        "title": "AttachmentMetadata"
      },
      "AuthenticationResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          },
          "authentication_method": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "SSO",
                  "Password",
                  "Passkey",
                  "AppleOAuth",
                  "GitHubOAuth",
                  "GoogleOAuth",
                  "MicrosoftOAuth",
                  "MagicAuth",
                  "Impersonation"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Authentication Method"
          },
          "impersonator": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Impersonator"
              },
              {
                "type": "null"
              }
            ]
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "user": {
            "$ref": "#/components/schemas/workos__types__user_management__user__User"
          },
          "sealed_session": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sealed Session"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "refresh_token",
          "user"
        ],
        "title": "AuthenticationResponse",
        "description": "Representation of a WorkOS User and Organization ID response."
      },
      "BaseMIMEData": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "SHA-256 hash of the base64-encoded content, serving as a unique identifier."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Original filename of the attachment."
          },
          "size": {
            "type": "integer",
            "title": "Size",
            "description": "Size of the base64-encoded content in bytes."
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type",
            "description": "MIME type of the attachment, determining how it should be handled."
          },
          "metadata": {
            "$ref": "#/components/schemas/AttachmentMetadata-Output",
            "description": "Additional metadata about the attachment.",
            "default": {
              "is_inline": false
            }
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "size",
          "mime_type"
        ],
        "title": "BaseMIMEData"
      },
      "CallbackResponse": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/workos__types__user_management__user__User"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id"
          },
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          }
        },
        "type": "object",
        "required": [
          "user",
          "organization_id",
          "access_token",
          "refresh_token"
        ],
        "title": "CallbackResponse"
      },
      "CreateApplicationRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateApplicationRequest"
      },
      "CreateApplicationResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          }
        },
        "type": "object",
        "required": [
          "name",
          "client_id",
          "client_secret",
          "scope"
        ],
        "title": "CreateApplicationResponse"
      },
      "CreateMongoUserResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "workos_user": {
            "$ref": "#/components/schemas/workos__types__user_management__user__User"
          },
          "user": {
            "$ref": "#/components/schemas/cube_server__services__iam__models__User"
          }
        },
        "type": "object",
        "required": [
          "success",
          "workos_user",
          "user"
        ],
        "title": "CreateMongoUserResponse"
      },
      "CreateOrganizationRequest": {
        "properties": {
          "organization_name": {
            "type": "string",
            "title": "Organization Name"
          },
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Domains"
          },
          "agencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Agencies"
          },
          "parameters": {
            "$ref": "#/components/schemas/OrganizationParameters"
          }
        },
        "type": "object",
        "required": [
          "organization_name",
          "domains",
          "agencies",
          "parameters"
        ],
        "title": "CreateOrganizationRequest"
      },
      "CreateOrganizationResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "workos_organization": {
            "$ref": "#/components/schemas/workos__types__organizations__organization__Organization"
          },
          "organization": {
            "$ref": "#/components/schemas/cube_server__services__iam__models__Organization"
          }
        },
        "type": "object",
        "required": [
          "success",
          "workos_organization",
          "organization"
        ],
        "title": "CreateOrganizationResponse"
      },
      "CreateSchemaEntry": {
        "properties": {
          "form_schema": {
            "type": "object",
            "title": "Form Schema"
          },
          "ai_model": {
            "type": "string",
            "title": "Ai Model"
          },
          "is_current": {
            "type": "boolean",
            "title": "Is Current",
            "default": true
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "form_schema",
          "ai_model"
        ],
        "title": "CreateSchemaEntry"
      },
      "CreateUserRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id"
          },
          "parameters": {
            "$ref": "#/components/schemas/UserParameters"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password",
          "first_name",
          "last_name",
          "organization_id",
          "parameters"
        ],
        "title": "CreateUserRequest"
      },
      "CreateUserResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "user": {
            "$ref": "#/components/schemas/cube_server__services__iam__models__User"
          }
        },
        "type": "object",
        "required": [
          "success",
          "user"
        ],
        "title": "CreateUserResponse"
      },
      "DebugInfo": {
        "properties": {
          "headers": {
            "type": "object",
            "title": "Headers"
          },
          "cookies": {
            "type": "object",
            "title": "Cookies"
          },
          "query_params": {
            "type": "object",
            "title": "Query Params"
          },
          "path_params": {
            "type": "object",
            "title": "Path Params"
          },
          "body": {
            "type": "object",
            "title": "Body"
          },
          "token_info": {
            "type": "object",
            "title": "Token Info"
          }
        },
        "type": "object",
        "required": [
          "headers",
          "cookies",
          "query_params",
          "path_params",
          "body",
          "token_info"
        ],
        "title": "DebugInfo"
      },
      "DisplayMetadata": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL of the attachment for display purposes."
          },
          "type": {
            "type": "string",
            "enum": [
              "image",
              "pdf",
              "txt"
            ],
            "title": "Type",
            "description": "Type of the attachment, determining how it should be handled."
          }
        },
        "type": "object",
        "required": [
          "url",
          "type"
        ],
        "title": "DisplayMetadata"
      },
      "DistanceData": {
        "properties": {
          "distance": {
            "type": "number",
            "title": "Distance"
          },
          "duration": {
            "type": "number",
            "title": "Duration"
          }
        },
        "type": "object",
        "required": [
          "distance",
          "duration"
        ],
        "title": "DistanceData"
      },
      "DocumentAPIRequest": {
        "properties": {
          "model": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "gpt-4o-2024-08-06",
                  "gpt-4o-2024-11-20",
                  "gpt-4o-mini"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "claude-3-5-sonnet-20241022"
                ],
                "const": "claude-3-5-sonnet-20241022"
              }
            ],
            "title": "Model",
            "description": "Model used for chat completion"
          },
          "json_schema": {
            "type": "object",
            "title": "Json Schema",
            "description": "JSON schema format used to validate the output data."
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "description": "If true, the extraction will be streamed to the user using the active WebSocket connection",
            "default": false
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed",
            "description": "Seed for the random number generator. If not provided, a random seed will be generated.",
            "examples": [
              null
            ]
          },
          "temperature": {
            "type": "number",
            "title": "Temperature",
            "description": "Temperature for sampling. If not provided, the default temperature for the model will be used.",
            "default": 0.0,
            "examples": [
              0.0
            ]
          },
          "documents": {
            "items": {
              "$ref": "#/components/schemas/MIMEData"
            },
            "type": "array",
            "title": "Documents",
            "description": "List of documents to be analyzed"
          },
          "prompting_context": {
            "$ref": "#/components/schemas/PromptingContext",
            "description": "Additional context to be used by the AI model",
            "default": {},
            "examples": [
              {
                "document_structure": [
                  {
                    "content_summary": "Contains sender and receiver addresses",
                    "title": "Invoice Header"
                  }
                ],
                "domain_glossary": [
                  {
                    "definition": "Bill of Lading",
                    "term": "B/L"
                  }
                ],
                "other_context": [
                  "Please consider the following instructions: ..."
                ],
                "regex_instructions": [
                  {
                    "description": "All potential VAT numbers in the documents",
                    "name": "VAT Number",
                    "pattern": "[Ff][Rr]\\s*(\\d\\s*){11}"
                  }
                ],
                "user_info": {
                  "email": "john.doe@domain.com",
                  "first_name": "John",
                  "last_name": "Doe"
                }
              }
            ]
          },
          "ws_identifier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ws Identifier",
            "description": "Identifier of the WebSocket connection used to stream the extraction"
          },
          "store_in_db": {
            "type": "boolean",
            "title": "Store In Db",
            "description": "If true, the extraction will be stored in the database",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "model",
          "json_schema",
          "documents"
        ],
        "title": "DocumentAPIRequest"
      },
      "DocumentAPIResponse": {
        "properties": {
          "model": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "gpt-4o-2024-08-06",
                  "gpt-4o-2024-11-20",
                  "gpt-4o-mini"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "claude-3-5-sonnet-20241022"
                ],
                "const": "claude-3-5-sonnet-20241022"
              }
            ],
            "title": "Model",
            "description": "Model used for chat completion"
          },
          "json_schema": {
            "type": "object",
            "title": "Json Schema",
            "description": "JSON schema format used to validate the output data."
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "description": "If true, the extraction will be streamed to the user using the active WebSocket connection",
            "default": false
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed",
            "description": "Seed for the random number generator. If not provided, a random seed will be generated.",
            "examples": [
              null
            ]
          },
          "temperature": {
            "type": "number",
            "title": "Temperature",
            "description": "Temperature for sampling. If not provided, the default temperature for the model will be used.",
            "default": 0.0,
            "examples": [
              0.0
            ]
          },
          "documents": {
            "items": {
              "$ref": "#/components/schemas/BaseMIMEData"
            },
            "type": "array",
            "title": "Documents",
            "description": "List of documents analyzed (without content, for MongoDB storage)"
          },
          "prompting_context": {
            "$ref": "#/components/schemas/PromptingContext",
            "description": "Additional context to be used by the AI model",
            "default": {},
            "examples": [
              {
                "document_structure": [
                  {
                    "content_summary": "Contains sender and receiver addresses",
                    "title": "Invoice Header"
                  }
                ],
                "domain_glossary": [
                  {
                    "definition": "Bill of Lading",
                    "term": "B/L"
                  }
                ],
                "other_context": [
                  "Please consider the following instructions: ..."
                ],
                "regex_instructions": [
                  {
                    "description": "All potential VAT numbers in the documents",
                    "name": "VAT Number",
                    "pattern": "[Ff][Rr]\\s*(\\d\\s*){11}"
                  }
                ],
                "user_info": {
                  "email": "john.doe@domain.com",
                  "first_name": "John",
                  "last_name": "Doe"
                }
              }
            ]
          },
          "ws_identifier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ws Identifier",
            "description": "Identifier of the WebSocket connection used to stream the extraction"
          },
          "store_in_db": {
            "type": "boolean",
            "title": "Store In Db",
            "description": "If true, the extraction will be stored in the database",
            "default": false
          },
          "response": {
            "title": "Response",
            "description": "Informations extracted from the document"
          },
          "likelihoods": {
            "title": "Likelihoods",
            "description": "Uncertainties of the fields extracted from the document"
          },
          "regex_instruction_results": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RegexInstructionResult"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Regex Instruction Results",
            "description": "Results of the regex instructions"
          },
          "prompting_context_message": {
            "type": "string",
            "title": "Prompting Context Message",
            "description": "Message generated from the prompting context",
            "default": ""
          },
          "usage": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UsageData"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "model",
          "json_schema",
          "documents",
          "response",
          "likelihoods"
        ],
        "title": "DocumentAPIResponse"
      },
      "DocumentSection": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content_summary": {
            "type": "string",
            "title": "Content Summary"
          }
        },
        "type": "object",
        "required": [
          "title"
        ],
        "title": "DocumentSection"
      },
      "DomainTerm": {
        "properties": {
          "term": {
            "type": "string",
            "title": "Term"
          },
          "definition": {
            "type": "string",
            "title": "Definition"
          }
        },
        "type": "object",
        "required": [
          "term",
          "definition"
        ],
        "title": "DomainTerm"
      },
      "EmailCheckRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "EmailCheckRequest"
      },
      "EmailCheckResponse": {
        "properties": {
          "exists": {
            "type": "boolean",
            "title": "Exists"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "organization_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Name"
          },
          "agencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Agencies"
          },
          "suggestion_first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suggestion First Name"
          },
          "suggestion_last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suggestion Last Name"
          }
        },
        "type": "object",
        "required": [
          "exists",
          "agencies"
        ],
        "title": "EmailCheckResponse"
      },
      "FormLogData": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "form_updated_by_user"
            ],
            "const": "form_updated_by_user",
            "title": "Type"
          },
          "data": {
            "type": "object",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "title": "FormLogData"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HeadersDebugInfo": {
        "properties": {
          "all_headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "All Headers"
          },
          "cookies": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Cookies"
          },
          "authorization": {
            "type": "string",
            "title": "Authorization"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": [
          "all_headers",
          "cookies",
          "authorization",
          "organization_id"
        ],
        "title": "HeadersDebugInfo"
      },
      "Identity": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "organization_id"
        ],
        "title": "Identity"
      },
      "Impersonator": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "reason": {
            "type": "string",
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "email",
          "reason"
        ],
        "title": "Impersonator",
        "description": "Representation of a WorkOS Dashboard member impersonating a user"
      },
      "ListApplicationsResponse": {
        "properties": {
          "applications": {
            "items": {
              "$ref": "#/components/schemas/ApplicationResponse"
            },
            "type": "array",
            "title": "Applications"
          }
        },
        "type": "object",
        "required": [
          "applications"
        ],
        "title": "ListApplicationsResponse"
      },
      "MIMEData": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "SHA-256 hash of the base64-encoded content, serving as a unique identifier."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Original filename of the attachment."
          },
          "size": {
            "type": "integer",
            "title": "Size",
            "description": "Size of the base64-encoded content in bytes."
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type",
            "description": "MIME type of the attachment, determining how it should be handled."
          },
          "metadata": {
            "$ref": "#/components/schemas/AttachmentMetadata-Input",
            "description": "Additional metadata about the attachment.",
            "default": {
              "is_inline": false
            }
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Base64-encoded content of the attachment."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "size",
          "mime_type",
          "content"
        ],
        "title": "MIMEData"
      },
      "MagicSignupRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "agency_id": {
            "type": "string",
            "title": "Agency Id"
          }
        },
        "type": "object",
        "required": [
          "email",
          "first_name",
          "last_name",
          "agency_id"
        ],
        "title": "MagicSignupRequest"
      },
      "MagicSignupResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "user": {
            "$ref": "#/components/schemas/cube_server__services__iam__models__User"
          }
        },
        "type": "object",
        "required": [
          "success",
          "user"
        ],
        "title": "MagicSignupResponse"
      },
      "OCR-Input": {
        "properties": {
          "pages": {
            "items": {
              "$ref": "#/components/schemas/Page-Input"
            },
            "type": "array",
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "pages"
        ],
        "title": "OCR"
      },
      "OCR-Output": {
        "properties": {
          "pages": {
            "items": {
              "$ref": "#/components/schemas/Page-Output"
            },
            "type": "array",
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "pages"
        ],
        "title": "OCR"
      },
      "OrganizationDomain": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "organization_domain"
            ],
            "const": "organization_domain",
            "title": "Object"
          },
          "domain": {
            "type": "string",
            "title": "Domain"
          },
          "state": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "failed",
                  "pending",
                  "legacy_verified",
                  "verified"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "verification_strategy": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "manual",
                  "dns"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Verification Strategy"
          },
          "verification_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Verification Token"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "object",
          "domain"
        ],
        "title": "OrganizationDomain"
      },
      "OrganizationParameters": {
        "properties": {
          "schemas": {
            "items": {
              "$ref": "#/components/schemas/OrganizationSchemaEntry"
            },
            "type": "array",
            "title": "Schemas",
            "description": "Schemas for the organization",
            "default": []
          }
        },
        "type": "object",
        "title": "OrganizationParameters"
      },
      "OrganizationSchemaEntry": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version"
          },
          "form_schema": {
            "type": "object",
            "title": "Form Schema"
          },
          "is_current": {
            "type": "boolean",
            "title": "Is Current",
            "description": "This is a flag to indicate if this is the current schema for the object type"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "This is a flag to indicate if this schema is active, useful for A/B testing"
          },
          "tag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tag",
            "description": "Tag for the schema, only for display purposes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the schema"
          }
        },
        "type": "object",
        "required": [
          "version",
          "form_schema",
          "is_current",
          "is_active",
          "created_at"
        ],
        "title": "OrganizationSchemaEntry"
      },
      "Page-Input": {
        "properties": {
          "page_number": {
            "type": "integer",
            "title": "Page Number"
          },
          "width": {
            "type": "integer",
            "title": "Width"
          },
          "height": {
            "type": "integer",
            "title": "Height"
          },
          "blocks": {
            "items": {
              "$ref": "#/components/schemas/TextBox"
            },
            "type": "array",
            "title": "Blocks"
          },
          "lines": {
            "items": {
              "$ref": "#/components/schemas/TextBox"
            },
            "type": "array",
            "title": "Lines"
          }
        },
        "type": "object",
        "required": [
          "page_number",
          "width",
          "height",
          "blocks",
          "lines"
        ],
        "title": "Page"
      },
      "Page-Output": {
        "properties": {
          "page_number": {
            "type": "integer",
            "title": "Page Number"
          },
          "width": {
            "type": "integer",
            "title": "Width"
          },
          "height": {
            "type": "integer",
            "title": "Height"
          },
          "blocks": {
            "items": {
              "$ref": "#/components/schemas/TextBox"
            },
            "type": "array",
            "title": "Blocks"
          },
          "lines": {
            "items": {
              "$ref": "#/components/schemas/TextBox"
            },
            "type": "array",
            "title": "Lines"
          }
        },
        "type": "object",
        "required": [
          "page_number",
          "width",
          "height",
          "blocks",
          "lines"
        ],
        "title": "Page"
      },
      "Point": {
        "properties": {
          "x": {
            "type": "integer",
            "title": "X"
          },
          "y": {
            "type": "integer",
            "title": "Y"
          }
        },
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "title": "Point"
      },
      "PromptingContext": {
        "properties": {
          "user_info": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "regex_instructions": {
            "items": {
              "$ref": "#/components/schemas/RegexInstruction"
            },
            "type": "array",
            "title": "Regex Instructions"
          },
          "document_structure": {
            "items": {
              "$ref": "#/components/schemas/DocumentSection"
            },
            "type": "array",
            "title": "Document Structure"
          },
          "domain_glossary": {
            "items": {
              "$ref": "#/components/schemas/DomainTerm"
            },
            "type": "array",
            "title": "Domain Glossary"
          },
          "other_context": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Other Context"
          }
        },
        "type": "object",
        "title": "PromptingContext"
      },
      "RegexInstruction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "pattern": {
            "type": "string",
            "title": "Pattern"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "pattern",
          "description"
        ],
        "title": "RegexInstruction"
      },
      "RegexInstructionResult": {
        "properties": {
          "instruction": {
            "$ref": "#/components/schemas/RegexInstruction"
          },
          "hits": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Hits"
          }
        },
        "type": "object",
        "required": [
          "instruction",
          "hits"
        ],
        "title": "RegexInstructionResult"
      },
      "TextBox": {
        "properties": {
          "width": {
            "type": "integer",
            "title": "Width"
          },
          "height": {
            "type": "integer",
            "title": "Height"
          },
          "center": {
            "$ref": "#/components/schemas/Point"
          },
          "vertices": {
            "prefixItems": [
              {
                "$ref": "#/components/schemas/Point"
              },
              {
                "$ref": "#/components/schemas/Point"
              },
              {
                "$ref": "#/components/schemas/Point"
              },
              {
                "$ref": "#/components/schemas/Point"
              }
            ],
            "type": "array",
            "maxItems": 4,
            "minItems": 4,
            "title": "Vertices",
            "description": "(top-left, top-right, bottom-right, bottom-left)"
          },
          "text": {
            "type": "string",
            "title": "Text"
          }
        },
        "type": "object",
        "required": [
          "width",
          "height",
          "center",
          "vertices",
          "text"
        ],
        "title": "TextBox"
      },
      "UpdateLanguageRequest": {
        "properties": {
          "language": {
            "type": "string",
            "title": "Language"
          }
        },
        "type": "object",
        "required": [
          "language"
        ],
        "title": "UpdateLanguageRequest"
      },
      "UpdateLanguageResponse": {
        "properties": {
          "language": {
            "type": "string",
            "title": "Language"
          },
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "language",
          "success",
          "message",
          "user_id"
        ],
        "title": "UpdateLanguageResponse"
      },
      "UpdatePasswordRequest": {
        "properties": {
          "new_password": {
            "type": "string",
            "title": "New Password"
          }
        },
        "type": "object",
        "required": [
          "new_password"
        ],
        "title": "UpdatePasswordRequest"
      },
      "UpdateSchemaEntry": {
        "properties": {
          "tag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tag"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_current": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Current"
          }
        },
        "type": "object",
        "title": "UpdateSchemaEntry"
      },
      "UpdateThemeRequest": {
        "properties": {
          "theme": {
            "type": "string",
            "title": "Theme"
          }
        },
        "type": "object",
        "required": [
          "theme"
        ],
        "title": "UpdateThemeRequest"
      },
      "UpdateThemeResponse": {
        "properties": {
          "theme": {
            "type": "string",
            "title": "Theme"
          },
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "theme",
          "success",
          "message",
          "user_id"
        ],
        "title": "UpdateThemeResponse"
      },
      "UsageData": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model"
          },
          "input_tokens": {
            "type": "integer",
            "title": "Input Tokens"
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output Tokens"
          },
          "cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost"
          }
        },
        "type": "object",
        "required": [
          "model",
          "input_tokens",
          "output_tokens"
        ],
        "title": "UsageData"
      },
      "UserInfo": {
        "properties": {
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "organization": {
            "type": "string",
            "title": "Organization"
          },
          "phone": {
            "type": "string",
            "title": "Phone"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          }
        },
        "type": "object",
        "title": "UserInfo"
      },
      "UserParameters": {
        "properties": {
          "language": {
            "type": "string",
            "enum": [
              "fr",
              "en",
              "de",
              "es",
              "it",
              "nl",
              "pt",
              "pl"
            ],
            "title": "Language"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id"
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number",
            "description": "Phone number of the user"
          }
        },
        "type": "object",
        "required": [
          "language",
          "organization_id"
        ],
        "title": "UserParameters"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WorkOSLoginRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "WorkOSLoginRequest"
      },
      "cube_server__services__iam__models__Organization": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "organization"
            ],
            "const": "organization",
            "title": "Object"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "domains": {
            "items": {
              "$ref": "#/components/schemas/OrganizationDomain"
            },
            "type": "array",
            "title": "Domains"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          },
          "allow_profiles_outside_organization": {
            "type": "boolean",
            "title": "Allow Profiles Outside Organization"
          },
          "lookup_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lookup Key"
          },
          "parameters": {
            "$ref": "#/components/schemas/OrganizationParameters"
          }
        },
        "type": "object",
        "required": [
          "id",
          "object",
          "name",
          "domains",
          "created_at",
          "updated_at",
          "allow_profiles_outside_organization",
          "parameters"
        ],
        "title": "Organization"
      },
      "cube_server__services__iam__models__User": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "user"
            ],
            "const": "user",
            "title": "Object"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "profile_picture_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Picture Url"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          },
          "parameters": {
            "$ref": "#/components/schemas/UserParameters"
          }
        },
        "type": "object",
        "required": [
          "object",
          "id",
          "email",
          "email_verified",
          "created_at",
          "updated_at",
          "parameters"
        ],
        "title": "User"
      },
      "workos__types__organizations__organization__Organization": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "organization"
            ],
            "const": "organization",
            "title": "Object"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "domains": {
            "items": {
              "$ref": "#/components/schemas/OrganizationDomain"
            },
            "type": "array",
            "title": "Domains"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          },
          "allow_profiles_outside_organization": {
            "type": "boolean",
            "title": "Allow Profiles Outside Organization"
          },
          "lookup_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lookup Key"
          }
        },
        "type": "object",
        "required": [
          "id",
          "object",
          "name",
          "domains",
          "created_at",
          "updated_at",
          "allow_profiles_outside_organization"
        ],
        "title": "Organization"
      },
      "workos__types__user_management__user__User": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "user"
            ],
            "const": "user",
            "title": "Object"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "email_verified": {
            "type": "boolean",
            "title": "Email Verified"
          },
          "profile_picture_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Picture Url"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "object",
          "id",
          "email",
          "email_verified",
          "created_at",
          "updated_at"
        ],
        "title": "User",
        "description": "Representation of a WorkOS User."
      }
    }
  }
}